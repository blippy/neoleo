#!/usr/bin/env perl
use v5.010; 
use Getopt::Long;

my $cxx = "c++";
GetOptions("cxx=s" => \$cxx);
my $prefix = "/usr/local";
GetOptions("prefix=s" => \$prefix);


mkdir "build";

open(FH, '>', "Makefile") or die $!;


print FH "# autogenerated by config.pl. Do not modify\n";
print FH "PREFIX ?= $prefix\n";
print FH "CXX = $cxx\n";

my $top = <<'EOM';

CXXFLAGS =  -std=c++23 -Wall # -fmodules
CXXFLAGS += -ggdb -O0
CXXFLAGS += -Wfatal-errors
CXXFLAGS += $(shell pkg-config --cflags ncursesw)
VPATH = src
#STD = gcm.cache/std.gcm

LDLIBS = $(shell pkg-config --libs ncursesw)
# LDLIBS += -lpanel -lform

.DEFAULT_GOAL = neoleo



EOM

print FH $top;

my @objs;


sub old_way {
while (<DATA>) {
	chomp($_);
	my @deps = split /\s+/,$_;
	my $targ = shift(@deps);
	#my $dep1 = shift(@deps);
	#my ($dep1, @rst) = @deps;
	print FH "build/$targ.o : src/$targ";
	push(@objs, "build/$targ.o"); 
	foreach (@deps) {
		print FH " build/$_.o";
	}
	print FH " neotypes.h \$(STD)";
	print FH "\n";
	print FH "\t" . '$(CXX) $(CXXFLAGS) -c $< -o $@' . "\n\n";
	#my $trg = @_[1]; 
	#say "$trg ";
}
}

my @cc_srcs = glob("src/*.cc");
#print "Files are @cc_srcs\n";
my @cc_objs = @cc_srcs;
for(@cc_objs) { s/src/build/; s/cc$/o/; }
#map { s/src/obj/ } @cc_srcs; 
#print "objs are @cc_objs\n";
print FH "OBJS = @cc_objs\n";

#print FH  "neoleo :  @objs\n";
#print FH "\t" . '$(CXX) $^  -o $@ $(LDLIBS)' . "\n";


my $middle = <<'EOM';


.DEFAULT_GOAL = neoleo

#$(STD) : # build the std module
#	#-mkdir build
#	$(CXX) $(CXXFLAGS) -c -fsearch-include-path bits/std.cc


info :
	@echo "CXX = $(CXX)"
	@echo "CC_OBJS = $(CC_OBJS)"
	@echo "CXX_OBJS = $(CXX_OBJS)"
	@echo "PREFIX:$(PREFIX)"
        
clean :
	rm -f build/*.o  neoleo
        
#cleaner : clean
#	find gcm.cache/*.gcm ! -name std.gcm -delete # delete everything in gcm.cach except std.gcm
        
install : neoleo
	install -p neoleo $(PREFIX)/bin 
        
uninstall : 
	rm -f $(PREFIX)/bin/neoleo 

check :
	./run-tests.pl

EOM

print FH $middle;


my $tail = <<'EOM';

neoleo : $(OBJS)
	$(CXX) $^ -o $@ $(LDLIBS)
	
build/%.o : src/%.cc
	$(CXX) $(CXXFLAGS) -c $< -o $@ 
EOM
print FH $tail;
close(FH);

__DATA__
basic.cc 		utils.cxx
cell.cc 		utils.cxx
io-2019.cc 		utils.cxx win.cxx
io-curses.cc		utils.cxx win.cxx
io-headless.cc 		utils.cxx mod.cxx
main.cc 		utils.cxx
mod.cxx
menu-2025.cc 		utils.cxx win.cxx
oleofile.cc 		utils.cxx
parser-2019.cc 		utils.cxx
regions.cc
sheet.cc		utils.cxx
spans.cc 		utils.cxx
tests.cc 		utils.cxx
utils.cxx 		
win.cxx
